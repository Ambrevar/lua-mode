diff --git a/lua-mode.el b/lua-mode.el
index 754bc76..a5a0784 100644
--- a/lua-mode.el
+++ b/lua-mode.el
@@ -936,18 +936,15 @@ ignored, nil otherwise."
      (regexp-opt '("{" "(" "[" "]" ")" "}") t))))
 
 (defconst lua-block-token-alist
-  '(("do"       "\\_<end\\_>"   "\\_<for\\|while\\_>"                     middle-or-open)
+  '(("do"       "\\_<end\\_>"   nil                                       open)
     ("function" "\\_<end\\_>"   nil                                       open)
     ("repeat"   "\\_<until\\_>" nil                                       open)
-    ("then"     "\\_<\\(else\\|elseif\\|end\\)\\_>" "\\_<\\(elseif\\|if\\)\\_>" middle)
+    ("then"     "\\_<\\(else\\|elseif\\|end\\)\\_>" nil                 open)
     ("{"        "}"           nil                                       open)
     ("["        "]"           nil                                       open)
     ("("        ")"           nil                                       open)
-    ("if"       "\\_<then\\_>"  nil                                       open)
-    ("for"      "\\_<do\\_>"    nil                                       open)
-    ("while"    "\\_<do\\_>"    nil                                       open)
     ("else"     "\\_<end\\_>"   "\\_<then\\_>"                              middle)
-    ("elseif"   "\\_<then\\_>"  "\\_<then\\_>"                              middle)
+    ("elseif"   nil           "\\_<then\\_>"                              close)
     ("end"      nil           "\\_<\\(do\\|function\\|then\\|else\\)\\_>" close)
     ("until"    nil           "\\_<repeat\\_>"                            close)
     ("}"        nil           "{"                                       close)
@@ -964,7 +961,8 @@ TOKEN-TYPE determines where the token occurs on a statement. open indicates that
 (defconst lua-indentation-modifier-regexp
   (concat
    "\\(\\_<"
-   (regexp-opt '("do" "function" "repeat" "then" "if" "else" "elseif" "for" "while") t)
+   ;; (regexp-opt '("do" "function" "repeat" "then" "if" "else" "elseif" "for" "while") t)
+   (regexp-opt '("do" "function" "repeat" "then" "else" "elseif") t)
    "\\_>\\|"
    (regexp-opt '("{" "(" "["))
    "\\)\\|\\(\\_<"
@@ -1113,9 +1111,9 @@ Returns final value of point as integer or nil if operation failed."
   (eval-when-compile
     (concat
      "\\(\\_<"
-     ;; 'until' is a special case since it is a closer followed by a statemen.
+     ;; 'until' is a special case since it is a closer followed by a statement.
      ;; It is one unconsistency of the Lua language.
-     (regexp-opt '("and" "or" "not" "in" "local" "until" "return") t)
+     (regexp-opt '("and" "or" "not" "in" "local" "until" "if" "for" "while") t)
      "\\_>\\|"
      "\\(^\\|[^" lua-operator-class "]\\)"
      (regexp-opt '("+" "-" "*" "/" "%" "^" ".." "=="
@@ -1170,21 +1168,6 @@ previous one even though it looked like an end-of-statement.")
       ;; the control inside this function
       (re-search-forward lua-cont-bol-regexp line-end t))))
 
-(defconst lua-block-starter-regexp
-  (eval-when-compile
-    (concat
-     "\\(\\_<"
-     (regexp-opt '("do" "while" "repeat" "until" "if" "then"
-                   "else" "elseif" "end" "for" "local") t)
-     "\\_>\\)")))
-
-(defun lua-first-token-starts-block-p ()
-  "Returns true if the first token on this line is a block starter token."
-  (let ((line-end (line-end-position)))
-    (save-excursion
-      (beginning-of-line)
-      (re-search-forward (concat "\\s *" lua-block-starter-regexp) line-end t))))
-
 (defun lua-is-continuing-statement-p (&optional parse-start)
   "Return non-nil if the line continues a statement.
 More specifically, return the point in the line that is continued.
@@ -1199,7 +1182,7 @@ The criteria for a continuing statement are:
       (if parse-start (goto-char parse-start))
       (save-excursion (setq prev-line (lua-forward-line-skip-blanks 'back)))
       (and prev-line
-           (not (lua-first-token-starts-block-p))
+           ;; (not (lua-first-token-starts-block-p))
            (or (lua-first-token-continues-p)
                (and (goto-char prev-line)
                     ;; check last token of previous nonblank line
@@ -1226,19 +1209,6 @@ The criteria for a continuing statement are:
         (when (and found-match (= line (line-number-at-pos)))
           (point))))))
 
-(defun lua-resolve-token-type (found-token found-pos)
-  "Get resolved token type.
-If token type is 'middle-or-open, determine which one it is and
-return it."
-  (save-excursion
-    (let ((token-type (lua-get-token-type (lua-get-block-token-info found-token))))
-      (if (not (eq token-type 'middle-or-open))
-          token-type
-        (goto-char found-pos)
-        (if (not (lua-find-matching-token-word found-token 'backward))
-            'open
-          'middle)))))
-
 (defun lua-line-indent-impact-current (&optional bound)
   "Calculate how much current line impacts indentation of current line.
 `bound' is set to `line-end-position' by default."
@@ -1252,7 +1222,7 @@ return it."
     (if (or (lua-comment-or-string-p)
             (not (looking-at lua-indentation-modifier-regexp)))
         0
-      (let ((token-type (lua-resolve-token-type (match-string 0) (match-beginning 0))))
+      (let ((token-type (lua-get-token-type (lua-get-block-token-info (match-string 0)))))
         (cond
          ((eq token-type 'middle)
           (- lua-indent-level))
@@ -1263,7 +1233,7 @@ return it."
             (while (lua-find-regexp 'forward lua-indentation-modifier-regexp bound)
               (let ((found-token (match-string 0))
                     (found-pos (match-beginning 0)))
-                (setq token-type (lua-resolve-token-type found-token found-pos))
+                (setq token-type (lua-get-token-type (lua-get-block-token-info found-token)))
                 ;; Only if 'close and unmatched.
                 (when (and (eq token-type 'close)
                            (not (lua-find-matching-token-in-line found-token found-pos token-type)))
@@ -1285,13 +1255,13 @@ return it."
       ;; Shift if first token is 'middle.
       (when (and (not (lua-comment-or-string-p))
                  (looking-at lua-indentation-modifier-regexp)
-                 (eq 'middle (setq first-token-type (lua-resolve-token-type (match-string 0) (match-beginning 0)))))
+                 (eq 'middle (setq first-token-type (lua-get-token-type (lua-get-block-token-info (match-string 0))))))
         (setq shift (+ shift lua-indent-level)))
       ;; Loop over all tokens in line.
       (while (lua-find-regexp 'forward lua-indentation-modifier-regexp bound)
         (let ((found-token (match-string 0))
               (found-pos (match-beginning 0)))
-          (setq token-type (lua-resolve-token-type found-token found-pos))
+          (setq token-type (lua-get-token-type (lua-get-block-token-info found-token)))
           ;; Only if unmatched 'open and unmatched 'close if first token was not
           ;; 'close.
           (unless (lua-find-matching-token-in-line found-token found-pos token-type)
diff --git a/test/indentation-test.el b/test/indentation-test.el
index 376ece2..ce80873 100644
--- a/test/indentation-test.el
+++ b/test/indentation-test.el
@@ -189,18 +189,18 @@ x = {
 (ert-deftest lua-indentation-return-continuation ()
   (should-lua-indent "\
 return
-   123")
+123")
 
   (should-lua-indent "\
 do
    return
-      123
+   123
 end")
 
   (should-lua-indent "\
 do
    return
-      x +
+   x +
       y
 end")
 
@@ -284,9 +284,8 @@ while foo do a = a + 1 end
 a = 0")
 
   (should-lua-indent "\
-while
-   x +
-      y > 0
+while x +
+   y > 0
 do
    a = a + 1
 end
@@ -494,7 +493,7 @@ local function
 
   (should-lua-indent "\
 local
-function foo (arg1, arg2) bar end
+   function foo (arg1, arg2) bar end
 ")
 
   (should-lua-indent "\
@@ -596,14 +595,8 @@ end
 a = 0")
 
   (should-lua-indent "\
-for k, v
-   in pairs(bar) do a = a + 1 end
-
-a = 0")
-
-  (should-lua-indent "\
-for k, v
-   in pairs(bar) do a = a + 1 end
+for k, v in
+   pairs(bar) do a = a + 1 end
 
 a = 0")
 
